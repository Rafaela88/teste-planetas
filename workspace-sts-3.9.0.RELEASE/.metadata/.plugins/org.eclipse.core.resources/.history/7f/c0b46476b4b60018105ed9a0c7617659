package com.planetas.api.controllers;

import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.bind.BindResult;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.planetas.api.services.PlanetaService;
import com.planetas.api.documents.Planeta;
import com.planetas.api.responses.Response;

@RestController
@RequestMapping(path="/api/planetas")
public class PlanetaController {
	
	@Autowired
	private PlanetaService planetaService;
	
	@GetMapping
	public ResponseEntity<List<Planeta>> listarTodos(){
		return ResponseEntity.ok(this.planetaService.listarTodos());		
	}
	
	@GetMapping(path="/{id}")
	public ResponseEntity<Planeta> listarPorId(@PathVariable(name ="id") String id){
		return  ResponseEntity.ok(this.planetaService.listarPorId(id));		
	}
	
	@PostMapping
	public ResponseEntity<Response<Planeta>> cadastrar(@Valid @RequestBody Planeta planeta, BindingResult result){
		if(result.hasErrors()) {
			List<String> erros = new ArrayList<String>();
			result.getAllErrors().forEach(erro ->erros.add(erro.getDefaultMessage()));
			return ResponseEntity.badRequest().body(new Response<Planeta>(erros));
		}
		return ResponseEntity.ok(new Response<Planeta>(this.planetaService.cadastrar(planeta)));
	}
		
	@PutMapping(path="/{id}")
	public ResponseEntity<Response<Planeta>> atualizar(@PathVariable(name ="id") String id, @Valid @RequestBody Planeta planeta, BindingResult result){
		planeta.setId(id);
		if(result.hasErrors()) {
			List<String> erros = new ArrayList<String>();
			result.getAllErrors().forEach(erro ->erros.add(erro.getDefaultMessage()));
			return ResponseEntity.badRequest().body(new Response<Planeta>(erros));
		}
		return ResponseEntity.ok(new Response<Planeta>(this.planetaService.atualizar(planeta)));
	}
	
	@DeleteMapping(path="/{id}")
	public ResponseEntity<Integer> remover(@PathVariable(name ="id") String id){
		this.planetaService.remover(id);
		return ResponseEntity.ok(1);
		
	}
}
